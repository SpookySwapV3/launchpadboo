type Pool @entity {
  id: Bytes!     # same as token address in hex form
  token: Bytes!  # address of the token
  price: BigInt! # latest known price

  # One-to-many relationships to events
  buys: [Bought!]! @derivedFrom(field: "pool")
  sells: [Sold!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")

   # New Relationship
  tokenCreated: TokenCreated @entityField
}

type TransactionContext @entity(immutable: true) {
  id: Bytes!   # transaction hash
  token: Bytes! 
  pool: Bytes!
}

type FakePoolCreated @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  sellPenalty: Int! # uint16
  ethReserve: BigInt! # uint256
  tokenReserve: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FakePoolMCapReached @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

    # New Relationship
  tokenCreated: TokenCreated! @relation(fields: ["token"], references: ["id"])
}

type FakePoolReserveChanged @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  ethReserve: BigInt! # uint256
  tokenReserve: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type Bought @entity(immutable: true) {
  id: Bytes!
  buyer: Bytes!
  token: Bytes!
  ethIn: BigInt!
  tokensOut: BigInt!
  newPrice: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  # Link to the Pool this token belongs to
  pool: Pool!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Sold @entity(immutable: true) {
  id: Bytes!
  seller: Bytes!
  token: Bytes!
  ethOut: BigInt!
  tokensIn: BigInt!
  newPrice: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  # Link to the Pool this token belongs to
  pool: Pool!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  sender: Bytes!
  amount0In: BigInt!
  amount1In: BigInt!
  amount0Out: BigInt!
  amount1Out: BigInt!
  to: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  # Link to the Pool for filtering swaps by token
  pool: Pool!
}

type TokenCreated @entity(immutable: true) {
  id: Bytes!
  creator: Bytes!
  token: Bytes!
  supply: BigInt!
  name: String!
  symbol: String!
  imageCid: String!
  description: String!
  links: [String!]!
  price: BigInt!
  lpStrategy: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

    # New Relationships
  fakePoolMCapReacheds: [FakePoolMCapReached!]! @derivedFrom(field: "tokenCreated")
  tokenLauncheds: [TokenLaunched!]! @derivedFrom(field: "tokenCreated")
  pool: Pool! @derivedFrom(field: "tokenCreated")
}

type TokenLaunched @entity(immutable: true) {
  id: Bytes!
  creator: Bytes!
  token: Bytes!
  pair: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

   # New Relationship
  tokenCreated: TokenCreated! @entityField

}

type PoolDayData @entity {
  id: Bytes!
  date: Int!       # Start of day timestamp in Unix (e.g. floor(timestamp / 86400) * 86400)
  pool: Pool!
  dailyVolume: BigInt!  # Accumulated volume over this day
  dailyVolumeToken: BigInt! 
  dailyVolumeETH: BigInt!   
  
}

type FakePoolCreated @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  sellPenalty: Int! # uint16
  ethReserve: BigInt! # uint256
  tokenReserve: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FakePoolMCapReached @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FakePoolReserveChanged @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  ethReserve: BigInt! # uint256
  tokenReserve: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
